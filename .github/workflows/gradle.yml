# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름
name: Spring Boot & Gradle CI/CD

# Event Trigger
# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
on:
  push:
    branches:
      - prod/main-service
      - prod/chat-service
jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # main-service
      - name: Grant execute permission for gradlew
        if: contains(github.ref, 'prod/main-service')
        run: |
          cd ./main-service
          chmod +x gradlew
      # properties
      - name: make application-cicd.properties
        if: contains(github.ref, 'prod/main-service')
        run: |
          echo "ls -a . & pwd"
          pwd
          ls -a .
          echo "mkdir & touch"
          mkdir -p ./main-service/src/main/resources
          cd ./main-service/src/main/resources
          touch ./application-cicd.properties
          pwd
          ls -a .
          echo "copy properties"
          echo $jasypt_encryptor_password  >> ./application-cicd.properties
          echo $slack_webhook_uri >> ./application-cicd.properties
          cat application-cicd.properties
        env:
          jasypt_encryptor_password: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          slack_webhook_uri: ${{ secrets.SLACK_WEBHOOK_URI }}
      # build
      - name: Build with Gradle
        if: contains(github.ref, 'prod/main-service')
        run: |
          cd ./main-service
          ./gradlew clean build
      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'prod/main-service')
        run: |
          cd ./main-service
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --tag ${{ secrets.DOCKER_USERNAME }}/main-service .
          docker push ${{ secrets.DOCKER_USERNAME }}/main-service

      # deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod-main-service
        if: contains(github.ref, 'prod/main-service')
        with:
          host: ${{ secrets.EC2_IP }}
          username: ubuntu
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          script: |
            sudo docker rm -f $(docker container rm -f main-service)
            docker image prune -f -a
            docker run -d --network joinus-network --name main-service -e "spring.cloud.config.uri=http://config-service:8888" -e "spring.rabbitmq.host=rabbitmq" -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" -e "logging.file=/api-logs/users-ws.log" -e "spring.zipkin.base-url=http://zipkin:9411" refinedstone/main-service
              # main-service
      - name: Grant execute permission for gradlew
        if: contains(github.ref, 'prod/main-service')
        run: |
          cd ./main-service
          chmod +x gradlew

      ## chat-service
      ## auth
      - name: Grant execute permission for gradlew
        if: contains(github.ref, 'prod/chat-service')
        run: |
          cd ./chat-service
          chmod +x gradlew
      # properties
      - name: make application-cicd.properties
        if: contains(github.ref, 'prod/chat-service')
        run: |
          echo "ls -a . & pwd"
          pwd
          ls -a .
          echo "mkdir & touch"
          mkdir -p ./chat-service/src/main/resources
          cd ./chat-service/src/main/resources
          touch ./application-cicd.properties
          pwd
          ls -a .
          echo "copy properties"
          echo $jasypt_encryptor_password  >> ./application-cicd.properties
          echo $slack_webhook_uri >> ./application-cicd.properties
          cat application-cicd.properties
        env:
          jasypt_encryptor_password: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          slack_webhook_uri: ${{ secrets.SLACK_WEBHOOK_URI }}
      - name: Build with Gradle
        if: contains(github.ref, 'prod/chat-service')
        run: |
          cd ./chat-service
          ./gradlew clean build

      ## docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'prod/chat-service')
        run: |
          cd ./chat-service
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --tag ${{ secrets.DOCKER_USERNAME }}/chat-service .
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-service

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod-chat-service
        if: contains(github.ref, 'prod/chat-service')
        with:
          host: ${{ secrets.EC2_IP }}
          username: ubuntu
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          script: |
            sudo docker rm -f $(docker container rm -f chat-service)
            docker image prune -f -a
            docker run -d --network joinus-network --name chat-service -e "spring.cloud.config.uri=http://config-service:8888" -e "spring.zipkin.base-url=http://zipkin:9411" -e "spring.rabbitmq.host=rabbitmq" -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" -e "logging.file=/api-logs/users-ws.log" refinedstone/chat-service
